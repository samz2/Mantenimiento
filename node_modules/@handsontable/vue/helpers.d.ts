import Handsontable from 'handsontable';
import { HotTableProps, VueProps } from './types';
/**
 * Rewrite the settings object passed to the watchers to be a clean array/object prepared to use within Handsontable config.
 *
 * @param {*} observerSettings Watcher object containing the changed data.
 * @returns {Object|Array}
 */
export declare function rewriteSettings(observerSettings: any): any[] | object;
/**
 * Initialize Handsontable.
 */
export declare function hotInit(): void;
/**
 * Generate an object containing all the available Handsontable properties and plugin hooks.
 *
 * @returns {Object}
 */
export declare function propFactory(): VueProps<HotTableProps>;
/**
 * Generate and object containing all the available Handsontable properties and hooks tied to the Handsontable updating function.
 *
 * @param {Function} updateFunction Function used to update a single changed property.
 * @returns {Object}
 */
export declare function propWatchFactory(updateFunction: Function): {};
/**
 * Update the Handsontable instance with a single changed property.
 *
 * @param {String} updatedProperty Updated property name.
 * @param {Object} updatedValue Watcher-generated updated value object.
 * @param {Object} oldValue Watcher-generated old value object.
 */
export declare function updateHotSettings(updatedProperty: string, updatedValue: object, oldValue: object): void;
/**
 * Prepare the settings object containing the `on`-properties to be used in the Handsontable configuration.
 *
 * @param {Object} settings An object containing the properties, including the `on`-prefixed hook names.
 * @param {Object} [additionalSettings] An additional object containing the properties, including the `on`-prefixed hook names.
 * @returns {Object} An object containing the properties, with the `on`-prefixes trimmed.
 */
export declare function prepareSettings(settings: object, additionalSettings?: object): Handsontable.DefaultSettings;
